---
- hosts: all
  gather_facts: true
  become: false
  vars_files:
    - group_vars/main.yml
  
  tasks:
    - block:
      - name: Initial server setup (security etc.)
        include_role:
          name: jstet.initial_server_setup
        vars:
          extra_packages:
            - htop
            - net-tools
            - vim
            - ufw
            - git
          firewall: false

      - name: Installing Docker
        include_role:
          name: geerlingguy.docker
        vars:
          docker_users:
            - user
          docker_daemon_options:
            features:
              buildkit: true
      become: true
    
    - name: Clone a github repository
      git:
        repo: "https://github.com/{{  git_repo  }}"
        dest: /home/user/basel_viz
        clone: yes
        update: yes
    
    - name: Adding api .env
      copy:
        src: ../../api/api/.env
        dest: /home/user/basel_viz/api/api/.env

    - name: Adding frontend .env
      copy:
        src: ../../frontend/.env
        dest: /home/user/basel_viz/frontend/.env

  
    - name: starting docker swarm mode
      shell:  |
        service docker restart
        docker swarm init
      ignore_errors: true
      become: yes

    - name: run local container registry
      shell: |
        echo 'version: "3"
        services:
          registry:
            image: registry:2
            ports:
              - 5000:5000
            restart: always' > docker-compose.yml
        docker compose up -d


    - name: building images
      shell: cd basel_viz && docker compose build --no-cache  
      
    - name: pushing images
      shell: cd basel_viz && docker compose push
  
    - name: deploying stack
      shell: |
        cd basel_viz && docker stack deploy --prune --resolve-image always -c docker-compose.yml app 
    
    
    - block:
      - name: Installing Caddy
        include_role:
          name: caddy_ansible.caddy_ansible
        vars:
          caddy_config: |
            {{  domain  }} 
            reverse_proxy :8000
            
          caddy_systemd_capabilities_enabled: true
          caddy_systemd_capabilities: "CAP_NET_BIND_SERVICE"
          caddy_setcap: true
      become: true
    

    # - name: stop firewall 
    #   shell: |
    #     yes 'y' | ufw disable
    #   become: yes
        
    # - name: default ufw pol
    #   shell: |
    #     ufw default deny incoming
    #     ufw default allow outgoing
    #   become: yes

    # - name: allowing http/https/ssh
    #   shell: |
    #     ufw allow http
    #     ufw allow https
    #     ufw allow ssh
    #     yes 'y' | ufw enable
    #   become: yes